<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<link rel="canonical" href="https://clashgithub.github.io/news/article-98292.htm" />
	<title>victoriaMetrics中的一些Sao操作_在线工具</title>
	<!-- for-mobile-apps -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<link rel="icon" href="/assets/website/img/clashgithub/favicon.ico" type="image/x-icon"/>
		<meta name="description" content="victoriaMetrics中的一些Sao操作   目录   victoriaMetrics中的一些Sao操作  快速获取当前时间 计算结构体的哈希值 将字符串添加到已有的[]byte中 将int6" />
	
    <meta name="author" content="Clash Github官方机场站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashgithub.github.io/news/article-98292.htm" />
    <meta property="og:site_name" content="Clash Github官方机场站" />
    <meta property="og:title" content="victoriaMetrics中的一些Sao操作_在线工具" />
    <meta property="og:image" content="https://clashgithub.github.io/uploads/20240228/462333cdd7156cdfce9b23a70ece7cac.webp" />
        <meta property="og:release_date" content="2025-04-18T09:35:22" />
    <meta property="og:updated_time" content="2025-04-18T09:35:22" />
        <meta property="og:description" content="victoriaMetrics中的一些Sao操作   目录   victoriaMetrics中的一些Sao操作  快速获取当前时间 计算结构体的哈希值 将字符串添加到已有的[]byte中 将int6" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="victoriaMetrics中的一些Sao操作_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
        
	<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
			function hideURLbar(){ window.scrollTo(0,1); } </script>
	<!-- //for-mobile-apps -->
	<link href="/assets/website/css/clashgithub/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
	<link href="/assets/website/css/clashgithub/style.css" rel="stylesheet" type="text/css" media="all" />
	<!-- js -->
	<script type="text/javascript" src="/assets/website/js/frontend/clashgithub/jquery-2.1.4.min.js"></script>
	<!-- //js -->
	<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
	<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
	<!-- start-smoth-scrolling -->
	<script type="text/javascript">
		jQuery(document).ready(function($) {
			$(".scroll").click(function(event){		
				event.preventDefault();
				$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
			});
		});
	</script>
	<!-- start-smoth-scrolling -->
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GD12V8FJRL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GD12V8FJRL');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">ClashGithub</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/free-nodes/">免费节点</a></li>
														<li><a href="/paid-subscribe/">推荐机场</a></li>
														<li><a href="/client.htm">客户端</a></li>
														<li><a href="/news/">新闻资讯</a></li>
													</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">victoriaMetrics中的一些Sao操作_在线工具</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/news/">新闻资讯</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="victoriametrics中的一些sao操作">victoriaMetrics中的一些Sao操作</h2> </p> <div class="toc"> <div class="toc-container-header">目录</div> <ul> <li> <a href="#victoriametrics%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9Bsao%E6%93%8D%E4%BD%9C"  rel="nofollow">victoriaMetrics中的一些Sao操作</a></p> <ul> <li><a href="#%E5%BF%AB%E9%80%9F%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4"  rel="nofollow">快速获取当前时间</a></li> <li><a href="#%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC"  rel="nofollow">计算结构体的哈希值</a></li> <li><a href="#%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%B7%B2%E6%9C%89%E7%9A%84byte%E4%B8%AD"  rel="nofollow">将字符串添加到已有的[]byte中</a></li> <li><a href="#%E5%B0%86int64%E7%9A%84%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BAbyte%E6%95%B0%E7%BB%84"  rel="nofollow">将int64的数组转换为byte数组</a></li> <li><a href="#%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E7%9A%84syncwaitgroup"  rel="nofollow">并发访问的sync.WaitGroup</a></li> <li><a href="#%E6%97%B6%E9%97%B4%E6%B1%A0"  rel="nofollow">时间池</a></li> <li><a href="#%E8%AE%BF%E9%97%AE%E9%99%90%E9%80%9F"  rel="nofollow">访问限速</a></li> <li><a href="#%E4%BC%98%E5%85%88%E7%BA%A7%E6%8E%A7%E5%88%B6"  rel="nofollow">优先级控制</a></li> </ul> </li> </ul> </div> <h3 id="快速获取当前时间">快速获取当前时间</h3> <p>victoriaMetrics中有一个<code>fasttime</code>库，用于快速获取当前的Unix时间，实现其实挺简单，就是在后台使用一个goroutine不断以1s为周期刷新表示当前时间的变量<code>currentTimestamp</code>，获取的时候直接原子加载该变量即可。其性能约是<code>time.Now()</code>的8倍。</p> <p>其核心方式就是将主要任务放到后台运行，通过一个中间变量来传递运算结果，以此来通过异步的方式提升性能，但需要业务能包容一定的精度偏差。</p> <pre><code class="language-go">func init() { 	go func() { 		ticker := time.NewTicker(time.Second) 		defer ticker.Stop() 		for tm := range ticker.C {  			t := uint64(tm.Unix()) 			atomic.StoreUint64(&amp;currentTimestamp, t) 		} 	}() }  var currentTimestamp = uint64(time.Now().Unix())  // UnixTimestamp returns the current unix timestamp in seconds. // // It is faster than time.Now().Unix() func UnixTimestamp() uint64 { 	return atomic.LoadUint64(&amp;currentTimestamp) } </code></pre> <h3 id="计算结构体的哈希值">计算结构体的哈希值</h3> <p><code>hashUint64</code>函数中使用<code>xxhash.Sum64</code>计算了结构体<code>Key</code>的哈希值。通过<code>unsafe.Pointer</code>将指针转换为<code>*[]byte</code>类型，byte数组的长度为<code>unsafe.Sizeof(*k)</code>，<code>unsafe.Sizeof()</code>返回结构体的字节大小。</p> <p>如果一个数据为固定的长度，如h的类型为uint64，则可以直接指定长度为8进行转换，如：<em>bp:=([8]byte)(unsafe.Pointer(&amp;h))</em></p> <blockquote> <p>需要注意的是<code>unsafe.Sizeof()</code>返回的是数据结构的大小而不是其指向内容的数据大小，如下返回的slice大小为24，为slice首部数据结构<code>SliceHeader</code>的大小，而不是其引用的数据大小(可以使用len获取slice引用的数据大小)。此外如果结构体中有指针，则转换成的byte中存储的也是指针存储的地址。</p> <pre><code>slice := []int{1,2,3,4,5,6,7,8,9,10} fmt.Println(unsafe.Sizeof(slice)) //24 </code></pre> </blockquote> <pre><code class="language-go">type Key struct { 	Part interface{} 	Offset uint64 }  func (k *Key) hashUint64() uint64 { 	buf := (*[unsafe.Sizeof(*k)]byte)(unsafe.Pointer(k)) 	return xxhash.Sum64(buf[:]) } </code></pre> <h3 id="将字符串添加到已有的byte中">将字符串添加到已有的[]byte中</h3> <p>使用如下方式即可：</p> <pre><code class="language-go">str := "1231445" arr := []byte{1, 2, 3} arr = append(arr, str...) </code></pre> <h3 id="将int64的数组转换为byte数组">将int64的数组转换为byte数组</h3> <p>直接操作了底层的<code>SliceHeader</code></p> <pre><code class="language-go">func int64ToByteSlice(a []int64) (b []byte) {    sh := (*reflect.SliceHeader)(unsafe.Pointer(&amp;b))    sh.Data = uintptr(unsafe.Pointer(&amp;a[0]))    sh.Len = len(a) * int(unsafe.Sizeof(a[0]))    sh.Cap = sh.Len    return } </code></pre> <h3 id="并发访问的syncwaitgroup">并发访问的sync.WaitGroup</h3> <p>并发访问的<code>sync.WaitGroup</code>的目的是为了在运行时添加需要等待的goroutine</p> <pre><code class="language-go">// WaitGroup wraps sync.WaitGroup and makes safe to call Add/Wait // from concurrent goroutines. // // An additional limitation is that call to Wait prohibits further calls to Add // until return. type WaitGroup struct { 	sync.WaitGroup 	mu sync.Mutex }  // Add registers n additional workers. Add may be called from concurrent goroutines. func (wg *WaitGroup) Add(n int) { 	wg.mu.Lock() 	wg.WaitGroup.Add(n) 	wg.mu.Unlock() }  // Wait waits until all the goroutines call Done. // // Wait may be called from concurrent goroutines. // // Further calls to Add are blocked until return from Wait. func (wg *WaitGroup) Wait() { 	wg.mu.Lock() 	wg.WaitGroup.Wait() 	wg.mu.Unlock() }  // WaitAndBlock waits until all the goroutines call Done and then prevents // from new goroutines calling Add. // // Further calls to Add are always blocked. This is useful for graceful shutdown // when other goroutines calling Add must be stopped. // // wg cannot be used after this call. func (wg *WaitGroup) WaitAndBlock() { 	wg.mu.Lock() 	wg.WaitGroup.Wait()  	// Do not unlock wg.mu, so other goroutines calling Add are blocked. }  // There is no need in wrapping WaitGroup.Done, since it is already goroutine-safe. </code></pre> <h3 id="时间池">时间池</h3> <p>高频次创建<code>timer</code>会消耗一定的性能，为了减少某些情况下的性能损耗，可以使用<code>sync.Pool</code>来回收利用创建的<code>timer</code></p> <pre><code class="language-go">// Get returns a timer for the given duration d from the pool. // // Return back the timer to the pool with Put. func Get(d time.Duration) *time.Timer { 	if v := timerPool.Get(); v != nil { 		t := v.(*time.Timer) 		if t.Reset(d) { 			logger.Panicf("BUG: active timer trapped to the pool!") 		} 		return t 	} 	return time.NewTimer(d) }  // Put returns t to the pool. // // t cannot be accessed after returning to the pool. func Put(t *time.Timer) { 	if !t.Stop() { 		// Drain t.C if it wasn't obtained by the caller yet. 		select { 		case &lt;-t.C: 		default: 		} 	} 	timerPool.Put(t) }  var timerPool sync.Pool </code></pre> <h3 id="访问限速">访问限速</h3> <p>victoriaMetrics的<code>vminsert</code>作为<code>vmagent</code>和<code>vmstorage</code>之间的组件，接收<code>vmagent</code>的流量并将其转发到<code>vmstorage</code>。在<code>vmstorage</code>卡死、处理过慢或下线的情况下，有可能会导致无法转发流量，进而造成<code>vminsert</code> CPU和内存飙升，造成组件故障。为了防止这种情况，<code>vminsert</code>使用了限速器，当接收到的流量激增时，可以在牺牲一部分数据的情况下保证系统的稳定性。</p> <p><code>victoriaMetrics</code>的源码中对限速器有如下描述：</p> <blockquote> <p><em>Limit the number of conurrent f calls in order to prevent from excess memory usage and CPU thrashing</em></p> </blockquote> <p>限速器使用了两个参数：<code>maxConcurrentInserts</code>和<code>maxQueueDuration</code>，前者给出了突发情况下可以处理的最大请求数，后者给出了某个请求的最大超时时间。需要注意的是<code>Do(f func() error)</code>是异步执行的，而<code>ch</code>又是全局的，因此会异步等待其他请求释放资源(<code>struct{}</code>)。</p> <p>可以看到限速器使用了指标来指示当前的限速状态。同时使用<code>cgroup.AvailableCPUs()*4</code> (即<code>runtime.GOMAXPROCS(-1)*4</code>)来设置默认的<code>maxConcurrentInserts</code>长度。</p> <blockquote> <p>当该限速器用在处理如http请求时，该限速器并不能限制底层上送的请求，其限制的是对请求的处理。在高流量业务处理中，这也是最消耗内存的地方，通常包含数据读取、内存申请拷贝等。底层的数据受<code>/proc/sys/net/core/somaxconn</code>和socket缓存区的限制。</p> </blockquote> <pre><code class="language-go">var ( 	maxConcurrentInserts = flag.Int("maxConcurrentInserts", cgroup.AvailableCPUs()*4, "The maximum number of concurrent inserts. Default value should work for most cases, "+ 		"since it minimizes the overhead for concurrent inserts. This option is tigthly coupled with -insert.maxQueueDuration") 	maxQueueDuration = flag.Duration("insert.maxQueueDuration", time.Minute, "The maximum duration for waiting in the queue for insert requests due to -maxConcurrentInserts") )  // ch is the channel for limiting concurrent calls to Do. var ch chan struct{}  // Init initializes concurrencylimiter. // // Init must be called after flag.Parse call. func Init() { 	ch = make(chan struct{}, *maxConcurrentInserts) //初始化limiter，最大突发并行请求量为maxConcurrentInserts }  // Do calls f with the limited concurrency. func Do(f func() error) error { 	// Limit the number of conurrent f calls in order to prevent from excess 	// memory usage and CPU thrashing. 	select { 	case ch &lt;- struct{}{}: //在channel中添加一个元素，表示开始处理一个请求 		err := f() //阻塞等大请求处理结束 		&lt;-ch //请求处理完之后释放channel中的一个元素，释放出的空间可以用于处理下一个请求 		return err 	default: 	}      //如果当前达到处理上限maxConcurrentInserts，则需要等到其他Do(f func() error)释放资源。 	// All the workers are busy. 	// Sleep for up to *maxQueueDuration. 	concurrencyLimitReached.Inc() 	t := timerpool.Get(*maxQueueDuration) //获取一个timer，设置等待超时时间为 maxQueueDuration 	select { 	case ch &lt;- struct{}{}: //在maxQueueDuration时间内等待其他请求释放资源，如果获取到资源，则回收timer，继续处理 		timerpool.Put(t) 		err := f() 		&lt;- 		return err 	case &lt;-t.C: //在maxQueueDuration时间内没有获取到资源，定时器超时后回收timer，丢弃请求并返回错误信息 		timerpool.Put(t) 		concurrencyLimitTimeout.Inc() 		return &amp;httpserver.ErrorWithStatusCode{ 			Err: fmt.Errorf("cannot handle more than %d concurrent inserts during %s; possible solutions: "+ 				"increase `-insert.maxQueueDuration`, increase `-maxConcurrentInserts`, increase server capacity", *maxConcurrentInserts, *maxQueueDuration), 			StatusCode: http.StatusServiceUnavailable, 		} 	} }  var ( 	concurrencyLimitReached = metrics.NewCounter(`vm_concurrent_insert_limit_reached_total`) 	concurrencyLimitTimeout = metrics.NewCounter(`vm_concurrent_insert_limit_timeout_total`)  	_ = metrics.NewGauge(`vm_concurrent_insert_capacity`, func() float64 { 		return float64(cap(ch)) 	}) 	_ = metrics.NewGauge(`vm_concurrent_insert_current`, func() float64 { 		return float64(len(ch)) 	}) ) </code></pre> <h3 id="优先级控制">优先级控制</h3> <p>victoriaMetrics的<code>pacelimiter</code>库实现了优先级控制。主要方法由<code>Inc</code>、<code>Dec</code>和<code>WaitIfNeeded</code>。低优先级任务需要调用<code>WaitIfNeeded</code>方法，如果此时有高优先级任务(调用<code>Inc</code>方法)，则低优先级任务需要等待高优先级任务结束(调用<code>Dec</code>方法)之后才能继续执行。</p> <pre><code class="language-go">// PaceLimiter throttles WaitIfNeeded callers while the number of Inc calls is bigger than the number of Dec calls. // // It is expected that Inc is called before performing high-priority work, // while Dec is called when the work is done. // WaitIfNeeded must be called inside the work which must be throttled (i.e. lower-priority work). // It may be called in the loop before performing a part of low-priority work. type PaceLimiter struct { 	mu          sync.Mutex 	cond        *sync.Cond 	delaysTotal uint64 	n           int32 }  // New returns pace limiter that throttles WaitIfNeeded callers while the number of Inc calls is bigger than the number of Dec calls. func New() *PaceLimiter { 	var pl PaceLimiter 	pl.cond = sync.NewCond(&amp;pl.mu) 	return &amp;pl }  // Inc increments pl. func (pl *PaceLimiter) Inc() { 	atomic.AddInt32(&amp;pl.n, 1) }  // Dec decrements pl. func (pl *PaceLimiter) Dec() { 	if atomic.AddInt32(&amp;pl.n, -1) == 0 { 		// Wake up all the goroutines blocked in WaitIfNeeded, 		// since the number of Dec calls equals the number of Inc calls. 		pl.cond.Broadcast() 	} }  // WaitIfNeeded blocks while the number of Inc calls is bigger than the number of Dec calls. func (pl *PaceLimiter) WaitIfNeeded() { 	if atomic.LoadInt32(&amp;pl.n) &lt;= 0 { 		// Fast path - there is no need in lock. 		return 	} 	// Slow path - wait until Dec is called. 	pl.mu.Lock() 	for atomic.LoadInt32(&amp;pl.n) &gt; 0 { 		pl.delaysTotal++ 		pl.cond.Wait() 	} 	pl.mu.Unlock() }  // DelaysTotal returns the number of delays inside WaitIfNeeded. func (pl *PaceLimiter) DelaysTotal() uint64 { 	pl.mu.Lock() 	n := pl.delaysTotal 	pl.mu.Unlock() 	return n } </code></pre> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-97537.htm">宠物领养中心需要什么条件才能去上班（宠物领养机构在哪里）</a></p>
                                        <p>下一个：<a href="/news/article-98293.htm">宠物粮市场分析图（宠物粮市场份额）</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-90083.htm" title="动物疫苗价格表图片高清大全集视频（动物疫苗接种时间表）">动物疫苗价格表图片高清大全集视频（动物疫苗接种时间表）</a></li>
                        <li class="py-2"><a href="/news/article-83601.htm" title="北京有没有领养狗的地方（北京有没有领养狗的地方啊）">北京有没有领养狗的地方（北京有没有领养狗的地方啊）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-30-node-share-links.htm" title="3月30日→19.3M/S|2025年最新免费节点Shadowrocket/V2ray/Clash/SSR订阅链接地址，便宜机场推荐">3月30日→19.3M/S|2025年最新免费节点Shadowrocket/V2ray/Clash/SSR订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-75990.htm" title="兰州狗狗市场（兰州市的狗市场在哪）">兰州狗狗市场（兰州市的狗市场在哪）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-11-clash-node-daily-updates.htm" title="4月11日→22.5M/S|2025年最新免费节点Clash/SSR/V2ray/Shadowrocket订阅链接地址，便宜机场推荐">4月11日→22.5M/S|2025年最新免费节点Clash/SSR/V2ray/Shadowrocket订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-93062.htm" title="宠物粮市场分析报告范文怎么写（宠物粮市场分析报告范文怎么写的）">宠物粮市场分析报告范文怎么写（宠物粮市场分析报告范文怎么写的）</a></li>
                        <li class="py-2"><a href="/news/article-96093.htm" title="上海宠物基地猫（上海宠物猫养殖基地）">上海宠物基地猫（上海宠物猫养殖基地）</a></li>
                        <li class="py-2"><a href="/news/article-79392.htm" title="国内十大猫粮品牌排行榜对比（国内知名猫粮品牌）">国内十大猫粮品牌排行榜对比（国内知名猫粮品牌）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-18-shadowrocket-node.htm" title="3月18日→19.9M/S|2025年最新免费节点Clash/SSR/Shadowrocket/V2ray订阅链接地址，便宜机场推荐">3月18日→19.9M/S|2025年最新免费节点Clash/SSR/Shadowrocket/V2ray订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-17-free-node-subscribe.htm" title="4月17日→18.2M/S|2025年最新免费节点SSR/V2ray/Shadowrocket/Clash订阅链接地址，便宜机场推荐">4月17日→18.2M/S|2025年最新免费节点SSR/V2ray/Shadowrocket/Clash订阅链接地址，便宜机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">53</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/website/img/clashgithub/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                                    <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                <p class="m-0">Clash Github官方机场站 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/website/js/frontend/clashgithub/bootstrap.js"></script>
	<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>