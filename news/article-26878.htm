<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<link rel="canonical" href="https://clashgithub.github.io/news/article-26878.htm" />
	<title>Vue2 中封装组件-消息提示 Message</title>
	<!-- for-mobile-apps -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<link rel="icon" href="/assets/website/img/clashgithub/favicon.ico" type="image/x-icon"/>
		<meta name="description" content="由于我在开发的个人博客前台中需要自行封装许多复用组件，所以跟大家分享一下我认为比较难的组件—消息提示 Message 的整个开发流程及其难点的解决方法。  1.Message 组件的基本介绍  1.1" />
	
    <meta name="author" content="Clash Github官方机场站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashgithub.github.io/news/article-26878.htm" />
    <meta property="og:site_name" content="Clash Github官方机场站" />
    <meta property="og:title" content="Vue2 中封装组件-消息提示 Message" />
    <meta property="og:image" content="https://clashgithub.github.io/uploads/20240228/3503087554da3534b733d898ce4beb4e.webp" />
        <meta property="og:release_date" content="2024-12-17T10:13:18" />
    <meta property="og:updated_time" content="2024-12-17T10:13:18" />
        <meta property="og:description" content="由于我在开发的个人博客前台中需要自行封装许多复用组件，所以跟大家分享一下我认为比较难的组件—消息提示 Message 的整个开发流程及其难点的解决方法。  1.Message 组件的基本介绍  1.1" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Vue2 中封装组件-消息提示 Message">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
        
	<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
			function hideURLbar(){ window.scrollTo(0,1); } </script>
	<!-- //for-mobile-apps -->
	<link href="/assets/website/css/clashgithub/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
	<link href="/assets/website/css/clashgithub/style.css" rel="stylesheet" type="text/css" media="all" />
	<!-- js -->
	<script type="text/javascript" src="/assets/website/js/frontend/clashgithub/jquery-2.1.4.min.js"></script>
	<!-- //js -->
	<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
	<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
	<!-- start-smoth-scrolling -->
	<script type="text/javascript">
		jQuery(document).ready(function($) {
			$(".scroll").click(function(event){		
				event.preventDefault();
				$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
			});
		});
	</script>
	<!-- start-smoth-scrolling -->
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GD12V8FJRL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GD12V8FJRL');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">ClashGithub</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/free-nodes/">免费节点</a></li>
														<li><a href="/paid-subscribe/">推荐机场</a></li>
														<li><a href="/client.htm">客户端</a></li>
														<li><a href="/news/">新闻资讯</a></li>
													</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Vue2 中封装组件-消息提示 Message</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/news/">新闻资讯</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <p>由于我在开发的个人博客前台中需要自行封装许多复用组件，所以跟大家分享一下我认为比较难的组件—消息提示 Message 的整个开发流程及其难点的解决方法。</p> <h2> <a id="1Message__4" rel="nofollow"></a>1.Message 组件的基本介绍</h2> <h3> <a id="11__6" rel="nofollow"></a>1.1 最终效果图</h3> <p>最终的效果图如下：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221230/04220e808362586d4af1c01cc2587720.jpg" alt="Vue2 中封装组件-消息提示 Message"></p> <h3> <a id="12_Options__12" rel="nofollow"></a>1.2 Options 参数</h3> <p>Message 组件的主要参数见下表：</p> <table> <thead> <tr> <th>参数</th> <th>说明</th> <th>类型</th> <th>可选值</th> <th>默认值</th> </tr> </thead> <tbody> <tr> <td>content</td> <td>消息内容</td> <td>String</td> <td>——</td> <td>“”(空字符串)</td> </tr> <tr> <td>type</td> <td>消息类型</td> <td>String</td> <td>info/error/success/warn</td> <td>info</td> </tr> <tr> <td>duration</td> <td>显示时间</td> <td>Number</td> <td>——</td> <td>2000(ms)</td> </tr> <tr> <td>container</td> <td>组件的父容器</td> <td>HTMLElement</td> <td>——</td> <td>document.body</td> </tr> <tr> <td>callback</td> <td>回调函数(在消息消失后执行，如果不传则不执行)</td> <td>Function</td> <td>——</td> <td>undefined</td> </tr> </tbody> </table> <h3> <a id="13__24" rel="nofollow"></a>1.3 使用方法</h3> <p>因为 Message 组件在我的个人博客系统中会经常使用，所以并不是注册局部组件也不是注册全局组件，而是直接挂载到<code>Vue.prototype</code>这一原型上，后面 vue 实例对象使用起来就会更加方便，只需要调用<code>this.$showMessage()</code>方法。<br /> 但我们需要有一个获取 vue 实例对象中的某个 DOM 节点的方法：</p> <ul> <li>此时我们可以借助<code>ref</code>这个属性，通过<code>this.$refs.xxxx</code>来获取该 DOM 节点</li> </ul> <p>具体代码如下：</p> <pre><code class="prism language-vue">&lt;template&gt;   &lt;div class="container" ref="container"&gt;     &lt;button @click="handleClick"&gt;&lt;/button&gt;   &lt;/div&gt; &lt;/template&gt;  &lt;script&gt; export default {   methods: {     handleClick() {       this.$showMessage({         content: "消息提示弹出",         type: "success",         duration: 1000,         container: this.$refs.container,         callback: () =&gt; {           console.log("消息提示消失，执行回调函数");         },       });     },   }, }; &lt;/script&gt;  &lt;style&gt; .test-container {   width: 500px;   height: 400px;   border: 2px solid;   margin: 0 auto;   position: relative; } &lt;/style&gt; </code></pre> <h2> <a id="2Message__69" rel="nofollow"></a>2.Message 组件的样式结构</h2> <p>Message 组件的样式结构如图所示：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221230/ad509ace0060a35deeac4bc00e5273c0.jpg" alt="Vue2 中封装组件-消息提示 Message"></p> <h3> <a id="21_HTML__75" rel="nofollow"></a>2.1 HTML 结构</h3> <p>从图中我们可以看出该组件的 HTML 结构还是比较简单的，就是是一个<code>message</code>容器包裹着一个<code>icon</code>图标与<code>content</code>字体内容。</p> <p>因为结构比较简单，使用我就<strong>没写 HTML 代码，而是直接用 JS 代码来生成元素</strong>，再通过添加 class 类名的方式来增添组件的样式，再进行相应的业务逻辑控制。<br /> 但大家还是可以看一下下面的 HTML 代码,这样可以对该组件的结构有更直观的了解。</p> <pre><code class="prism language-html"><span class="token comment">&lt;!-- 该组件没写 HTML 代码，而是直接用 JS 代码来生成元素 --&gt;</span> <span class="token comment">&lt;!-- 下面的代码只便于读者对该组件的结构有更直观的了解 --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Icon</span> <span class="token attr-name">:type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Icon</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{<!-- -->{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> </code></pre> <p>至于 icon 图标这块我是直接使用了自己已封装好的<code>Icon组件</code>,该组件实现起来比较简单，主要是通过<strong>传入 type 这 prop 属性来控制 Icon 图标的类型</strong>，我这边就直接贴代码：</p> <p><code>Icon.Vue 文件</code>代码如下：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iconfont icon-container<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fontClass<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">   <span class="token keyword">const</span> classMap <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span>     <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token string">"iconzhuye"</span><span class="token punctuation">,</span>     <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token string">"iconzhengque"</span><span class="token punctuation">,</span>     <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">"iconcuowu"</span><span class="token punctuation">,</span>     <span class="token literal-property property">close</span><span class="token operator">:</span> <span class="token string">"iconguanbi"</span><span class="token punctuation">,</span>     <span class="token literal-property property">warn</span><span class="token operator">:</span> <span class="token string">"iconjinggao"</span><span class="token punctuation">,</span>     <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token string">"iconxinxi"</span><span class="token punctuation">,</span>     <span class="token literal-property property">blog</span><span class="token operator">:</span> <span class="token string">"iconblog"</span><span class="token punctuation">,</span>     <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token string">"iconcode"</span><span class="token punctuation">,</span>     <span class="token literal-property property">about</span><span class="token operator">:</span> <span class="token string">"iconset_about_hov"</span><span class="token punctuation">,</span>     <span class="token literal-property property">weixin</span><span class="token operator">:</span> <span class="token string">"iconweixin"</span><span class="token punctuation">,</span>     <span class="token literal-property property">mail</span><span class="token operator">:</span> <span class="token string">"iconemail"</span><span class="token punctuation">,</span>     <span class="token literal-property property">github</span><span class="token operator">:</span> <span class="token string">"icongithub"</span><span class="token punctuation">,</span>     <span class="token literal-property property">qq</span><span class="token operator">:</span> <span class="token string">"iconsign_qq"</span><span class="token punctuation">,</span>     <span class="token literal-property property">arrowUp</span><span class="token operator">:</span> <span class="token string">"iconiconfonticonfonti2copy"</span><span class="token punctuation">,</span>     <span class="token literal-property property">arrowDown</span><span class="token operator">:</span> <span class="token string">"iconiconfonticonfonti2"</span><span class="token punctuation">,</span>     <span class="token literal-property property">empty</span><span class="token operator">:</span> <span class="token string">"iconempty"</span><span class="token punctuation">,</span>     <span class="token literal-property property">chat</span><span class="token operator">:</span> <span class="token string">"iconliuyan"</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">export</span> <span class="token keyword">const</span> types <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>classMap<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{<!-- --></span>     <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{<!-- --></span>       <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{<!-- --></span>         <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>         <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{<!-- --></span>       <span class="token comment">// 图标类样式</span>       <span class="token function">fontClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> classMap<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">   <span class="token comment">/* 导入远程iconfont样式库 */</span>   <span class="token atrule"><span class="token rule">@import</span> <span class="token string">"//at.alicdn.com/t/font_2164449_nalfgtq7il.css"</span><span class="token punctuation">;</span></span>   <span class="token selector">.iconfont</span> <span class="token punctuation">{<!-- --></span>     <span class="token property">color</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>   <span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span> </code></pre> <h3> <a id="22_CSS__149" rel="nofollow"></a>2.2 CSS 样式</h3> <p>从上面的样式结构图可看出 Message 组件的内部样式也比较简单，主要是：</p> <ul> <li> <code>message容器</code>中的子元素居中显示，我是通过 flex 布局是实现的。</li> <li> <code>message容器</code>的背景颜色随 type 这 prop 属性而变化，我是可通过不同 class 类名来进行控制。</li> <li>另外我使用了 Less 预处理器，并开启了 CSS Modules。 <ul> <li>对 Less 预处理器不熟悉的朋友，参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://ld246.com/article/1540735445473"  rel="nofollow">该博客</a> </li> <li>对 CSS Modules 不熟悉的朋友，参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.ruanyifeng.com/blog/2016/06/css_modules.html"  rel="nofollow">阮老师的文章</a> </li> </ul> </li> </ul> <p><code>showMessage.module.less文件</code>具体代码如下：</p> <pre><code class="prism language-less">@import "../styles/var.less"; @import "../styles/mixin.less"; .message {   /*message在container父容器中居中   该居中方案不能使用flex布局 因为flex会影响到父容器的其他子节点的布局*/   .self-center();    z-index: 999; //让该组件的层叠上下文置于顶层   border-radius: 5px;   padding: 10px 30px;   line-height: 2;   color: #fff;   box-shadow: -2px 2px 5px rgba(0, 0, 0, 0.5); //增加盒子阴影   transition: 0.4s; //过渡时间   white-space: nowrap; //防止宽度被挤压而导致文字分行    /*message内部子元素垂直居中*/   display: flex;   align-items: center;   /*message容器的初始状态，便于后续增加渐入淡出的效果 */   transform: translate(-50%, -50% + 25px);   opacity: 0;   &amp;-info {     background: @primary;   }   &amp;-success {     background: @success;   }   &amp;-warn {     background: @warn;   }   &amp;-error {     background: @danger;   } }  .icon {   font-size: 20px;   margin-right: 7px; } </code></pre> <p><code>var.less</code>变量文件：</p> <pre><code class="prism language-less">// 提供less变量 @danger: #cc3600; // 危险、错误 @primary: #6b9eee; // 主色调、链接 @words: #373737; // 大部分文字、深色文字 @lightWords: #999; // 少部分文字、浅色文字 @warn: #dc6a12; // 警告 @success: #7ebf50; // 成功 @gray: #b4b8bc; // 灰色 @dark: #202020; // 深色 </code></pre> <p><code>mixin.less</code>混入文件：</p> <pre><code class="prism language-less">// 提供混合样式 .self-center(@pos: absolute) {   position: @pos;   left: 50%;   top: 50%;   transform: translate(-50%, -50%); } </code></pre> <h2> <a id="3_Message__230" rel="nofollow"></a>3. Message 组件的业务逻辑</h2> <p>Message 组件虽然看起来比较简单，但这组件在许多情况下都要使用，要考虑其通用性，所以该组件的业务逻辑还是比较复杂的，我认为主要的难点有：</p> <ul> <li>获取 Icon 组件根元素的 DOM 节点</li> <li>Message 组件的渐入淡出的动态效果</li> </ul> <h3> <a id="31__Icon__DOM__237" rel="nofollow"></a>3.1 获取 Icon 组件根元素 DOM 节点</h3> <p>如果我们直接导入 Icon.Vue 组件文件并直接进行使用的话，得到的会是一个 Vue 实例对象，而且我们无法通过该对象来操作其根元素 DOM 节点。<br /> 所以此时我们要借助 vue 中的 render 渲染函数进行封装一个工具函数——getComponentRootDom。</p> <p><code>getComponentRootDom.js文件</code>具体代码如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span> <span class="token comment">/** 	获取某个组件渲染的Dom根元素 */</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">comp<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>   <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> <span class="token punctuation">{<!-- --></span> props <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> vm<span class="token punctuation">.</span>$el<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="32_Message__258" rel="nofollow"></a>3.2 Message 组件的渐入淡出的动态效果</h3> <h4> <a id="321__260" rel="nofollow"></a>3.2.1 渐入效果</h4> <p>渐入效果的代码其实是很简单的，但会出现渐入效果丢失的问题。<br /> 在我大量参阅资料后，发现是浏览器异步渲染机制所导致。(后续我也会对该部分内容进行详细的讲解，敬请期待)</p> <ul> <li>渐入效果丢失主要原因是：当时正处于 message 容器刚加入 container 父容器的时刻，message 容器尚未渲染完成，所以后面的样式代码会直接覆盖前面的样式代码。</li> <li>解决办法：在初始状态和正常位置状态之间加入一段会导致**重排(reflow)**的代码如：读取 DOM 节点的位置信息等操作。<code>message.clientHeight;</code> </li> </ul> <p>目前对浏览器异步渲染机制不熟悉的朋友，参考以下两篇博客：</p> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://wangdoc.com/javascript/bom/engine.html#%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E"  rel="nofollow">阮老师的 Javascript 电子书</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/panshaojun/p/14976728.html"  rel="nofollow">浏览器渲染机制</a></li> </ul> <p>渐入效果的代码如下：</p> <pre><code class="prism language-javascript"><span class="token comment">/* message容器初始状态的样式代码： transition: 0.4s;//过渡时间 transform: translate(-50%, -50% + 25px); opacity: 0; */</span> <span class="token comment">//渐入效果：初始状态 --&gt; 正常位置状态</span> container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将message容器加入到父容器中</span> message<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span> <span class="token comment">//造成reflow导致浏览器强行渲染</span> <span class="token comment">// 正常位置状态的样式</span> message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(-50%, -50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> </code></pre> <h4> <a id="322__290" rel="nofollow"></a>3.2.2 淡出效果</h4> <p>淡出效果的代码也很简单，主要难点有：</p> <ul> <li>何时删除 message 容器，监听什么事件? <ul> <li>参阅资料后发现动画结束之后会触发<code>transitionend</code>事件。</li> </ul> </li> </ul> <p>有了这个事件就后面的处理很好办了，我们可以先使用<code>setTimeout</code>方法进行延迟<code>duration</code>ms，在监听 message 容器的<code>transitionend</code>事件进行元素删除与执行回调函数的操作。<br /> 淡出效果的代码如下：</p> <pre><code class="prism language-javascript"><span class="token comment">/* 正常位置状态: message容器的样式代码： transition: 0.4s;//过渡时间 message.style.opacity = 1; message.style.transform = `translate(-50%, -50%)`; */</span>  <span class="token comment">// 淡出效果：正常位置状态 --&gt; 消失状态</span> <span class="token comment">//message容器动画的过渡时间</span> <span class="token keyword">const</span> transitionDuration <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>   <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span>transitionDuration <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//进行延迟(duration + transitionDuration)ms</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>   <span class="token comment">//消失状态的样式</span>   message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate(-50%, -50% - 25px)"</span><span class="token punctuation">;</span>   <span class="token comment">//监听transitionend事件</span>   message<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>     <span class="token string">"transitionend"</span><span class="token punctuation">,</span>     <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       message<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除message容器</span>       callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有回调函数就直接执行</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">{<!-- --></span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>   <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> duration <span class="token operator">+</span> transitionDuration<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h3> <a id="33__330" rel="nofollow"></a>3.3 业务逻辑的完整代码</h3> <p>下面我们来看看 message 组件业务逻辑的完整代码。<br /><code>showMessage.js文件</code>代码如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> getComponentRootDom <span class="token keyword">from</span> <span class="token string">"./getComponentRootDom"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> Icon <span class="token keyword">from</span> <span class="token string">"@/components/Icon"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./showMessage.module.less"</span><span class="token punctuation">;</span>  <span class="token comment">/**  * 消息提示  * @param {String} content 消息内容  * @param {String} type 消息类型  info  error  success  warn  * @param {Number} duration 多久后消失  * @param {HTMLElement} container 容器，消息会显示到该容器的正中间；如果不传，则显示到整个页面的正中间  * @param {Function} callback 回调函数，该函数会在弹出消息消失后执行，如果不传，则不执行  */</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>   <span class="token comment">//设置参数的默认值</span>   <span class="token keyword">const</span> content <span class="token operator">=</span> options<span class="token punctuation">.</span>content <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> type <span class="token operator">=</span> options<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">"info"</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> duration <span class="token operator">=</span> options<span class="token punctuation">.</span>duration <span class="token operator">||</span> <span class="token number">2000</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> container <span class="token operator">=</span> options<span class="token punctuation">.</span>container <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>   <span class="token keyword">const</span> callback <span class="token operator">=</span> options<span class="token punctuation">.</span>callback <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token comment">//JS代码生成message元素</span>   <span class="token keyword">const</span> message <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//得到Icon组件的根元素DOM节点</span>   <span class="token keyword">const</span> iconDom <span class="token operator">=</span> <span class="token function">getComponentRootDom</span><span class="token punctuation">(</span>Icon<span class="token punctuation">,</span> <span class="token punctuation">{<!-- --></span>     type<span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//message容器中增加相应的子元素</span>   message<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>styles<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>iconDom<span class="token punctuation">.</span>outerHTML<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;&lt;div&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token comment">//添加样式</span>   message<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>styles<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加message类名</span>   message<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>styles<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">message-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加消息类型类名</span>    <span class="token comment">// 由于需要满足 子绝父相 这一条件来进行居中定位</span>   <span class="token comment">// 所以需要判断容器的position值</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>container<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span>position <span class="token operator">===</span> <span class="token string">"static"</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>       container<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">"relative"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将message容器加入到父容器中</span>    <span class="token comment">//渐入效果：初始状态 --&gt; 正常位置状态</span>   message<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span> <span class="token comment">//造成reflow导致浏览器强行渲染</span>   <span class="token comment">// 正常位置状态的样式</span>   message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(-50%, -50%)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token comment">// 淡出效果：正常位置状态 --&gt; 消失状态</span>   <span class="token comment">//message容器动画的过渡时间</span>   <span class="token keyword">const</span> transitionDuration <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>     <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span>transitionDuration   <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进行延迟(duration + transitionDuration)ms</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//消失状态的样式</span>     message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     message<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">"translate(-50%, -50% - 25px)"</span><span class="token punctuation">;</span>     <span class="token comment">//监听transitionend事件</span>     message<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>       <span class="token string">"transitionend"</span><span class="token punctuation">,</span>       <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         message<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除message容器</span>         callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有回调函数就直接执行</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">{<!-- --></span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> duration <span class="token operator">+</span> transitionDuration<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <h2> <a id="4_Message__407" rel="nofollow"></a>4. Message 组件的挂载方法</h2> <p>由于 Message 组件在我的个人博客系统中会经常使用，为了使用起来更简单与灵活，所以并没有选择<strong>注册局部组件</strong>与<strong>注册全局组件</strong>这两个常用方法，而是选择直接挂载到<code>Vue.prototype</code>这一原型上，后面 vue 实例对象使用起来就会更加方便，调用起来也更加灵活，只需要调用<code>this.$showMessage()</code>方法。</p> <p><code>main.js 入口文件</code>相关代码如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span> <span class="token comment">//引入消息弹窗方法 并挂载到vue原型对象</span> <span class="token keyword">import</span> showMessage <span class="token keyword">from</span> <span class="token string">"./utils/showMessage"</span><span class="token punctuation">;</span> <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$showMessage <span class="token operator">=</span> showMessage<span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h2> <a id="_424" rel="nofollow"></a>结语</h2> <p>这是我目前所了解的知识面中最好的解答，当然也有可能存在一点的误区。</p> <p>所以如果对本文存在疑惑，可以去评论区进行留言，欢迎大家指出文中的错误观点。</p> <p>码字不易，觉得有帮助的朋友点赞，关注走一波。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-26420.htm">孕妇短裤哪个牌子的好(孕妇短裤哪个牌子的好穿)</a></p>
                                        <p>下一个：<a href="/news/article-28274.htm">宠物领养协议合同电子版有效吗安全吗（宠物领养电子合同模板）</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-46235.htm" title="javascript异步：callback-promise-async/await">javascript异步：callback-promise-async/await</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-17-free-high-speed-nodes.htm" title="12月17日→20.3M/S|2024年最新免费节点V2ray/SSR/Shadowrocket/Clash订阅链接地址，便宜机场推荐">12月17日→20.3M/S|2024年最新免费节点V2ray/SSR/Shadowrocket/Clash订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-clash-node-daily-updates.htm" title="12月7日→22.9M/S|2024年最新免费节点SSR/Shadowrocket/Clash/V2ray订阅链接地址，便宜机场推荐">12月7日→22.9M/S|2024年最新免费节点SSR/Shadowrocket/Clash/V2ray订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-16-free-node-subscribe-links.htm" title="2月16日→18.6M/S|2025年最新免费节点V2ray/Shadowrocket/SSR/Clash订阅链接地址，便宜机场推荐">2月16日→18.6M/S|2025年最新免费节点V2ray/Shadowrocket/SSR/Clash订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-51267.htm" title="让猫挠了几天之内打针有事吗（让猫挠了用不用打狂犬疫苗多久）">让猫挠了几天之内打针有事吗（让猫挠了用不用打狂犬疫苗多久）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-4-free-clash-subscribe.htm" title="12月4日→19.4M/S|2024年最新免费节点Shadowrocket/SSR/Clash/V2ray订阅链接地址，便宜机场推荐">12月4日→19.4M/S|2024年最新免费节点Shadowrocket/SSR/Clash/V2ray订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-50738.htm" title="百莲凯美容院加盟需要多少钱（附近整形美容医院有哪些）">百莲凯美容院加盟需要多少钱（附近整形美容医院有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-38295.htm" title="宠物店一年利润怎么样有人开吗知乎（宠物店一个月利润怎么样）">宠物店一年利润怎么样有人开吗知乎（宠物店一个月利润怎么样）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-10-free-node-subscribe-links.htm" title="1月10日→18.1M/S|2025年最新免费节点Shadowrocket/SSR/V2ray/Clash订阅链接地址，便宜机场推荐">1月10日→18.1M/S|2025年最新免费节点Shadowrocket/SSR/V2ray/Clash订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-22-free-high-speed-nodes.htm" title="1月22日→19.9M/S|2025年最新免费节点V2ray/SSR/Clash/Shadowrocket订阅链接地址，便宜机场推荐">1月22日→19.9M/S|2025年最新免费节点V2ray/SSR/Clash/Shadowrocket订阅链接地址，便宜机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/website/img/clashgithub/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="m-0">Clash Github官方机场站 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/website/js/frontend/clashgithub/bootstrap.js"></script>
	<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>