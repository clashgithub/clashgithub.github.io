<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<link rel="canonical" href="https://clashgithub.github.io/news/article-65525.htm" />
	<title>反射的概念 和基本使用（一）</title>
	<!-- for-mobile-apps -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<link rel="icon" href="/assets/website/img/clashgithub/favicon.ico" type="image/x-icon"/>
		<meta name="description" content="什么是反射  java反射 是指在运行状态中 对于任意一个类 我们都可以知到这个类的所有方法和属性 也可以调用其所有的方法和属性  这种动态获取的方式 我们称为反射  什么是class对象   我们通" />
	
    <meta name="author" content="Clash Github官方机场站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashgithub.github.io/news/article-65525.htm" />
    <meta property="og:site_name" content="Clash Github官方机场站" />
    <meta property="og:title" content="反射的概念 和基本使用（一）" />
    <meta property="og:image" content="https://clashgithub.github.io/uploads/20240228/17a9e01ded9e492cb2b2edefa16af20f.webp" />
        <meta property="og:release_date" content="2025-03-02T09:35:01" />
    <meta property="og:updated_time" content="2025-03-02T09:35:01" />
        <meta property="og:description" content="什么是反射  java反射 是指在运行状态中 对于任意一个类 我们都可以知到这个类的所有方法和属性 也可以调用其所有的方法和属性  这种动态获取的方式 我们称为反射  什么是class对象   我们通" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="反射的概念 和基本使用（一）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
        
	<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
			function hideURLbar(){ window.scrollTo(0,1); } </script>
	<!-- //for-mobile-apps -->
	<link href="/assets/website/css/clashgithub/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
	<link href="/assets/website/css/clashgithub/style.css" rel="stylesheet" type="text/css" media="all" />
	<!-- js -->
	<script type="text/javascript" src="/assets/website/js/frontend/clashgithub/jquery-2.1.4.min.js"></script>
	<!-- //js -->
	<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
	<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
	<!-- start-smoth-scrolling -->
	<script type="text/javascript">
		jQuery(document).ready(function($) {
			$(".scroll").click(function(event){		
				event.preventDefault();
				$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
			});
		});
	</script>
	<!-- start-smoth-scrolling -->
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GD12V8FJRL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GD12V8FJRL');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">ClashGithub</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/free-nodes/">免费节点</a></li>
														<li><a href="/paid-subscribe/">推荐机场</a></li>
														<li><a href="/client.htm">客户端</a></li>
														<li><a href="/news/">新闻资讯</a></li>
													</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">反射的概念 和基本使用（一）</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/news/">新闻资讯</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <h3 id="什么是反射">什么是反射</h3> <blockquote> <p>java反射 是指在运行状态中 对于任意一个类 我们都可以知到这个类的所有方法和属性 也可以调用其所有的方法和属性  这种动态获取的方式 我们称为<strong>反射</strong></p> </blockquote> <h3 id="什么是class对象">什么是class对象</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7979522ca41f14c021cfeea795249129.jpg" alt="反射的概念 和基本使用（一）"></p> <blockquote> <p>我们通过使用<code>反射</code> 就是通过Class类来实现的<code>Class</code> 类的实例表示正在运行的 Java 应用程序中的类和接口。</p> <p>也就是jvm中有N多的实例每个类都有该Class对象。（包括基本数据类型）</p> </blockquote> <h3 id="反射的使用">反射的使用</h3> <h4 id="获取class对象的三种方式">获取class对象的三种方式</h4> <h5 id="基本类"><strong>基本类</strong></h5> <pre><code class="language-java">/**  *  * @author : look-word  * @date : 2022-04-05 20:49  **/ public class Student {     private String username;     private String gender;      public  String getInfo() {         this.setUsername("张三");         this.setGender("男");         return this.username+"="+this.gender;     }      public String getUsername() {         return username;     }      public void setUsername(String username) {         this.username = username;     }      public String getGender() {         return gender;     }      public void setGender(String gender) {         this.gender = gender;     } }</code></pre> <h5 id="测试代码如下"><strong>测试代码如下</strong></h5> <pre><code class="language-java">/**  * @author : look-word  * @date : 2022-04-05 20:54  **/ public class Test {     public static void main(String[] args) {          /*             1 创建对象 获取其class对象          */         Student student = new Student();         Class&lt;? extends Student&gt; aClass = student.getClass();         System.out.println(aClass.getSimpleName());         /*             2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性          */         Class&lt;? extends Student&gt; bClass=Student.class;         System.out.println(aClass == bClass?"两者是同一对象":"两者不是同一对象");         /*             3 通过Class类的forName方法获取          */         try {             //  Class.forName(类的相对路径)             Class&lt;?&gt; cClass = Class.forName("bean.Student");             System.out.println(bClass == cClass?"两者是同一对象":"两者不是同一对象");         } catch (ClassNotFoundException e) {             e.printStackTrace();         }     } }</code></pre> <h5 id="结果如下"><strong>结果如下</strong></h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c864112bfaabe40687973992ac013ecc.jpg" alt="反射的概念 和基本使用（一）"></p> <h5 id="证明">证明</h5> <blockquote> <p>在运行期间 一个类只有一个class对象的产生</p> <p>常用的是<code>第三次</code> 清晰 明了 因为 在一个项目中 可能会产生 相同名字的类</p> <p>解决疑惑  为什么要是用 第三种</p> <p>第一种对象都有了还要反射干什么。</p> <p>第二种需要导入类的包，依赖太强，不导包就抛编译错误。</p> <p><code>第三种</code>，一个字符串可以传入也可写在配置文件中等多种方法。</p> </blockquote> <h4 id="获取class类中的所有构造方法">获取Class类中的所有构造方法</h4> <h5 id="基本类-1">基本类</h5> <pre><code class="language-java">public class Student {     //---------------构造方法-------------------     //（默认的构造方法）     Student(String str){         System.out.println("(默认)的构造方法 s = " + str);     }      //无参构造方法     public Student(){         System.out.println("调用了公有、无参构造方法执行了。。。");     }      //有一个参数的构造方法     public Student(char name){         System.out.println("姓名：" + name);     }      //有多个参数的构造方法     public Student(String name ,int age){         System.out.println("姓名："+name+" 年龄："+ age);//这的执行效率有问题，以后解决。     }      //受保护的构造方法     protected Student(boolean n){         System.out.println("受保护的构造方法 n = " + n);     }      //私有构造方法     private Student(int age){         System.out.println("私有的构造方法   年龄："+ age);     } }</code></pre> <h5 id="测试代码">测试代码</h5> <pre><code class="language-java">/**  * 测试构造方法  * @author : look-word  * @date : 2022-04-05 21:18  **/ public class TestConstructor {  /**  * 通过Class对象可以获取某个类中的：构造方法、成员变量、成员方法；并访问成员；  *  * 1.获取构造方法：  * 		1).批量的方法：  * 			public Constructor[] getConstructors()：所有"公有的"构造方法             public Constructor[] getDeclaredConstructors()：获取所有的构造方法(包括私有、受保护、默认、公有)   * 		2).获取单个的方法，并调用：  * 			public Constructor getConstructor(Class... parameterTypes):获取单个的"公有的"构造方法：  * 			public Constructor getDeclaredConstructor(Class... parameterTypes):获取"某个构造方法"可以是私有的，或受保护、默认、公有；  *  * 			调用构造方法：  * 			Constructor--&gt;newInstance(Object... initargs) */     public static void main(String[] args) throws Exception {         Class&lt;?&gt; student = Class.forName("bean.Student");         /*             1 获取所有共有的构造方法          */         System.out.println("\n1 获取所有共有的构造方法");         Constructor&lt;?&gt;[] constructors = student.getConstructors();         for (Constructor&lt;?&gt; constructor : constructors) {             System.out.println(constructor);         }          /*             2 获取共有的无参构造方法 可以写 null 或者 不填          */         System.out.println("\n2 获取共有的无参构造方法 可以写 null 或者 不填");         Constructor&lt;?&gt; constructor2 = student.getConstructor();         constructor2.newInstance();          /*             3 获取 给定参数共有的构造方法 public bean.Student(java.lang.String,int)          */         System.out.println("\n 3 获取 给定参数共有的构造方法 public bean.Student(java.lang.String,int)");         Constructor&lt;?&gt; constructor3 = student.getConstructor(String.class, int.class);         constructor3.newInstance("张三",19);          /*             4 获取 私有给定参数的构造方法 私有 不给定参数 不传参数即可          */         Constructor&lt;?&gt; constructor4 = student.getDeclaredConstructor(int.class);         /*             获取私有的属性 或者构造方法是 需要 设置无障碍 俗称 暴力访问             不设置 会出异常 java.lang.IllegalAccessException          */         constructor4.setAccessible(true);         constructor4.newInstance(19);     } }</code></pre> <h5 id="执行结果">执行结果</h5> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d6dcd384df6988ff11a3d3ea1648149d.jpg" alt="反射的概念 和基本使用（一）"></p> <h5 id="注意">注意</h5> <blockquote> <p>获取私有属性的时候 一定要设置无障碍</p> <p>setAccessible(true);</p> <p>不设置 会出异常 java.lang.IllegalAccessException</p> <p>newInstance(Object... initargs)  创建一个新实例<br /> 使用此<code>Constructor</code> 对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数初始化该实例。</p> <p>每次是用<code>newInstance</code>创建的对象 都是不同的对象 代表不同的实例</p> </blockquote> <h4 id="操作成员变量">操作成员变量</h4> <h5 id="基本类-2">基本类</h5> <pre><code class="language-java">  public class Student { 	public Student(){ 		 	} 	//**********字段*************// 	public String name; 	protected int age; 	char sex; 	private String phoneNum; 	 	@Override 	public String toString() { 		return "Student [name=" + name + ", age=" + age + ", sex=" + sex 				+ ", phoneNum=" + phoneNum + "]"; 	} }</code></pre> <h5 id="测试代码-1">测试代码</h5> <pre><code class="language-java">/**  * @author : look-word  * @date : 2022-04-05 21:55  **/ public class TestField {  /*  * 获取成员变量并调用：  *  * 1.批量的  * 		1).Field[] getFields():获取所有的"公有字段"  * 		2).Field[] getDeclaredFields():获取所有字段，包括：私有、受保护、默认、公有；  * 2.获取单个的：  * 		1).public Field getField(String fieldName):获取某个"公有的"字段；  * 		2).public Field getDeclaredField(String fieldName):获取某个字段(可以是私有的)  *  * 	 设置字段的值：  * 		Field --&gt; public void set(Object obj,Object value):  * 					参数说明：  * 					1.obj:要设置的字段所在的对象；  * 					2.value:要为字段设置的值； */     public static void main(String[] args) throws Exception{         Class&lt;?&gt; aClass = Class.forName("bean.Student");         Student student = new Student();          /*             获取所有的共有字段          */         System.out.println("-------------------获取所有的共有字段--------------------");         Field[] fields = aClass.getFields();         for (Field field : fields) {             /*                 filed =&gt; public java.lang.String bean.Student.username                 filed =&gt; 成员变量              */              /*                我理解为 给某个对象的 成员变量 赋值                当前的filed 为 username 因为这里只能获取为 共有属性的成员变量              * field.set(student,"zhangsan");              */             field.set(student,"zhangsan");             System.out.println(student);             /*                 field.get(student);                 获取某student中的 field 的 内容              */             Object o = field.get(student);             System.out.println(o);             /*              *  打印filed的内容 =&gt; public java.lang.String bean.Student.username              */             System.out.println(field);         }          System.out.println("-------------------给私有字段赋值--------------------");         Field phone = aClass.getDeclaredField("phone");         phone.setAccessible(true);// 设置无障碍          phone.set(student,"110");// 赋值给student对象          System.out.println("-------------------获取私有字段--------------------");         Field phone1 = aClass.getDeclaredField("phone");         phone1.setAccessible(true);// 设置无障碍         System.out.println(phone1.get(student));//取出student对象中的phone属性的值     } }</code></pre> <h5 id="注意-1">注意</h5> <blockquote> <p>在操作私有属性的时候 不管是获取还是设置值 都需要设置无障碍</p> <p>setAccessible(true);// 设置无障碍</p> </blockquote> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-65524.htm">隐藏滚动条适用于各个浏览器</a></p>
                                        <p>下一个：<a href="/news/article-66160.htm">Java中的字符串常量池是什么？</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-49713.htm" title="成都领养狗狗的地方在哪儿 成都领养狗狗的地方在哪儿啊">成都领养狗狗的地方在哪儿 成都领养狗狗的地方在哪儿啊</a></li>
                        <li class="py-2"><a href="/news/article-44242.htm" title="猫该打狂犬疫苗吗（猫该不该打狂犬）">猫该打狂犬疫苗吗（猫该不该打狂犬）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-30-free-high-speed-nodes.htm" title="1月30日→20M/S|2025年最新免费节点Clash/V2ray/SSR/Shadowrocket订阅链接地址，便宜机场推荐">1月30日→20M/S|2025年最新免费节点Clash/V2ray/SSR/Shadowrocket订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-66160.htm" title="Java中的字符串常量池是什么？">Java中的字符串常量池是什么？</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-free-node-subscribe-links.htm" title="1月20日→22.8M/S|2025年最新免费节点Shadowrocket/V2ray/SSR/Clash订阅链接地址，便宜机场推荐">1月20日→22.8M/S|2025年最新免费节点Shadowrocket/V2ray/SSR/Clash订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-53934.htm" title="Python使用pandas读取hdfs文件">Python使用pandas读取hdfs文件</a></li>
                        <li class="py-2"><a href="/news/article-63713.htm" title="动物防疫站可以打疫苗吗多少钱（动物防疫中心可以打疫苗吗）">动物防疫站可以打疫苗吗多少钱（动物防疫中心可以打疫苗吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-10-free-node-subscribe-links.htm" title="1月10日→18.1M/S|2025年最新免费节点Shadowrocket/SSR/V2ray/Clash订阅链接地址，便宜机场推荐">1月10日→18.1M/S|2025年最新免费节点Shadowrocket/SSR/V2ray/Clash订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-56702.htm" title="长沙哪里有免费领养宠物的地方（长沙哪里可以免费领养宠物）">长沙哪里有免费领养宠物的地方（长沙哪里可以免费领养宠物）</a></li>
                        <li class="py-2"><a href="/news/article-65525.htm" title="反射的概念 和基本使用（一）">反射的概念 和基本使用（一）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/website/img/clashgithub/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="m-0">Clash Github官方机场站 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/website/js/frontend/clashgithub/bootstrap.js"></script>
	<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>