<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<link rel="canonical" href="https://clashgithub.github.io/news/article-42258.htm" />
	<title>Vue3.Router路由的使用</title>
	<!-- for-mobile-apps -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<link rel="icon" href="/assets/website/img/clashgithub/favicon.ico" type="image/x-icon"/>
		<meta name="description" content="vue3和vue2路由基础部分变动不大，基础详情查看，该篇是针对之前的文章进行补充。vue2router基础。 1. router-link 属性    属性 描述     to 要跳转的路由   r" />
	
    <meta name="author" content="Clash Github官方机场站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashgithub.github.io/news/article-42258.htm" />
    <meta property="og:site_name" content="Clash Github官方机场站" />
    <meta property="og:title" content="Vue3.Router路由的使用" />
    <meta property="og:image" content="https://clashgithub.github.io/uploads/20240228/cc93aa4b19cc04eb52a9aba9ef1e6db7.webp" />
        <meta property="og:release_date" content="2025-01-18T07:13:24" />
    <meta property="og:updated_time" content="2025-01-18T07:13:24" />
        <meta property="og:description" content="vue3和vue2路由基础部分变动不大，基础详情查看，该篇是针对之前的文章进行补充。vue2router基础。 1. router-link 属性    属性 描述     to 要跳转的路由   r" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Vue3.Router路由的使用">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
        
	<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
			function hideURLbar(){ window.scrollTo(0,1); } </script>
	<!-- //for-mobile-apps -->
	<link href="/assets/website/css/clashgithub/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
	<link href="/assets/website/css/clashgithub/style.css" rel="stylesheet" type="text/css" media="all" />
	<!-- js -->
	<script type="text/javascript" src="/assets/website/js/frontend/clashgithub/jquery-2.1.4.min.js"></script>
	<!-- //js -->
	<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
	<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
	<!-- start-smoth-scrolling -->
	<script type="text/javascript">
		jQuery(document).ready(function($) {
			$(".scroll").click(function(event){		
				event.preventDefault();
				$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
			});
		});
	</script>
	<!-- start-smoth-scrolling -->
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GD12V8FJRL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GD12V8FJRL');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">ClashGithub</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/free-nodes/">免费节点</a></li>
														<li><a href="/paid-subscribe/">推荐机场</a></li>
														<li><a href="/client.htm">客户端</a></li>
														<li><a href="/news/">新闻资讯</a></li>
													</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">Vue3.Router路由的使用</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/news/">新闻资讯</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>vue3和vue2路由基础部分变动不大，基础详情查看，该篇是针对之前的文章进行补充。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6941237062074892301/"  rel="nofollow">vue2router基础</a>。</p> <h2><a id="1_routerlink__4" rel="nofollow"></a>1. router-link 属性</h2> <table> <thead> <tr> <th align="center">属性</th> <th align="center">描述</th> </tr> </thead> <tbody> <tr> <td align="center">to</td> <td align="center">要跳转的路由</td> </tr> <tr> <td align="center">replace</td> <td align="center">设置 replace 属性的话，当点击时，会调用 router.replace()，而不是 router.push()；</td> </tr> <tr> <td align="center">active-class</td> <td align="center">设置激活a元素后应用的class，默认是router-link-active</td> </tr> <tr> <td align="center">exact-active-class</td> <td align="center">链接精准激活时，应用于渲染的 的 class，默认是router-link-exact-active；</td> </tr> </tbody> </table> <p><code>使用push的特点是压入一个新的页面，那么在用户点击返回时，上一个页面还可以回退，但是如果我们希望当前 页面是一个替换操作，那么可以使用replace。</code></p> <h2><a id="2_webpack__19" rel="nofollow"></a>2. webpack 打包命名</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/1e9a5b4c22a7b55771b5130e0789cd9f.jpg" alt="Vue3.Router路由的使用"></p> <h2><a id="3__24" rel="nofollow"></a>3. 动态路由基本匹配</h2> <p>例如我们需要通过用户id进行路由匹配。</p> <p><strong>动态路由匹配</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/0bfc7fd2768599285da070ecdcddcb75.jpg" alt="Vue3.Router路由的使用"></p> <p><strong>获取动态路由的值：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/08dce61fb9dbe709514af0838a2e51f2.jpg" alt="Vue3.Router路由的使用"></p> <p><strong>匹配多个参数：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/90b73011fba694dfce223bcb07bb7aa6.jpg" alt="Vue3.Router路由的使用"></p> <h2><a id="4_NotFound_44" rel="nofollow"></a>4. NotFound</h2> <p>当路由匹配不到时，要跳转的页面。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/402848bc1545ddb24d3d331350fdbe89.jpg" alt="Vue3.Router路由的使用"></p> <p>效果图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/4e729ce3433840e7e8a09852822fec66.jpg" alt="Vue3.Router路由的使用"></p> <h2><a id="5__56" rel="nofollow"></a>5. 编程式路由</h2> <p>在vue2中主要使用<code>this.$router.push</code>进行跳转，而在vue3的composition中需要引入useRoute方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/ab829465e440d924f6946aa30b5c680b.jpg" alt="Vue3.Router路由的使用"></p> <h2><a id="6_routerlinkvslot_61" rel="nofollow"></a>6. router-link的v-slot</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://next.router.vuejs.org/zh/api/#custom"  rel="nofollow">官方文档</a></p> <p>vue-router4.0移除了原来route-link原有的tag属性，转而使用v-slot，更具有灵活性。 tag属性：可以决定router-link到底渲染成什么元素。</p> <p><strong>router-link 中v-slot的属性</strong></p> <table> <thead> <tr> <th>属性</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td>href</td> <td>解析后的URL</td> </tr> <tr> <td>route</td> <td>解析后的规范化的route对象</td> </tr> <tr> <td>navigate</td> <td>触发导航的函数</td> </tr> <tr> <td>isActive</td> <td>是否匹配的状态</td> </tr> <tr> <td>isExactActive</td> <td>是否精准的匹配状态</td> </tr> </tbody> </table> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/98469cb2949ab94b8d6d35d2185357a8.jpg" alt="Vue3.Router路由的使用"></p> <h2><a id="7_routerviewvslot_81" rel="nofollow"></a>7. router-view的v-slot</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://next.router.vuejs.org/api/#name"  rel="nofollow">官网地址</a></p> <p><code>&lt;router-view&gt;</code> 暴露了一个<code>v-slot</code> API，主要使用<code>&lt;transition&gt;</code> 和<code>&lt;keep-alive&gt;</code> 组件来包裹你的路由组件。</p> <pre><code class="prism language-html"><span class="token comment">&lt;!-- Component：要渲染的组件； --&gt;</span><span class="token comment">&lt;!-- route: 解析出的标准化路由地址。； --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ Component, route }<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span><span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>route.meta.transition ||<span class="token punctuation">'</span>fade<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out-in<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span><span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component<span class="token punctuation">"</span></span><span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>route.meta.usePathKey ? route.path : undefined<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token attr-name">#fallback</span><span class="token punctuation">&gt;</span></span> Loading...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span></code></pre> <h2><a id="8__108" rel="nofollow"></a>8. 动态添加路由</h2> <p>这个在开发后台系统的时候比较常用，经常要根据角色的不同给予不同的路由，而不是在routes中预先定义好。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/8b570e5bc57ec92760a299ec092cbb80.jpg" alt="Vue3.Router路由的使用"></p> <h2><a id="9__115" rel="nofollow"></a>9. 动态删除路由</h2> <ol> <li>方式一：添加一个name相同的路由</li> <li>通过removeRoute方法 传入 路由名称</li> <li>通过addRoute方法的返回值回调</li> </ol> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/0babb4bfc60689e5428ca05fc6e286ae.jpg" alt="Vue3.Router路由的使用"></p> <h2><a id="10__123" rel="nofollow"></a>10. 路由守卫</h2> <p>路由守卫主要查看<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://next.router.vuejs.org/guide/advanced/navigation-guards.html#using-the-options-api"  rel="nofollow">官网</a></p> <h3><a id="101__127" rel="nofollow"></a>10.1 路由前置守卫</h3> <p>全局的前置守卫<strong>beforeEach</strong>是在导航触发时会被回调的。开发中比较常用，如token权限拦截。</p> <p><strong>该守卫有三个参数：</strong></p> <p><code>to</code>:即将要进入的目标路由对象</p> <p><code>from</code>:即将离开的路由对象</p> <p><code>next</code>:通过next函数来决定如何进行跳转的。在vue2中常用，在vue3中我们通过返回值来控制，官方不介意在前置守卫中操作next。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/a5569fe3eeb711fa36ac60098cb307ae.jpg" alt="Vue3.Router路由的使用"></p> <p><strong>前置守卫返回值(Boolean)</strong></p> <p>1.返回<code>false</code>:取消当前导航</p> <p>2.不返回或者undefined：进行默认导航</p> <p>3.返回一个路由地址：</p> <ul> <li>可以是一个string类型的路径</li> <li>可以是一个对象，对象中包含path、query、params等信息。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/f87e670e24da9f5f3988dda8f34fb909.jpg" alt="Vue3.Router路由的使用"></p> <h3><a id="102__154" rel="nofollow"></a>10.2 全局解析守卫</h3> <p>你可以用<code>router.beforeResolve</code> 注册一个全局守卫。这和<code>router.beforeEach</code> 类似，因为它在<strong>每次导航</strong>时都会触发，但是确保在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被正确调用</strong>。</p> <p><code>router.beforeResolve</code> 是获取数据或执行任何其他操作（如果用户无法进入页面时你希望避免执行的操作）的理想位置。</p> <p><strong>该守卫有三个参数：</strong></p> <p><code>to</code>:即将要进入的目标路由对象</p> <p><code>from</code>:即将离开的路由对象</p> <p><code>next</code>:通过next函数来决定如何进行跳转的。在vue2中常用，在vue3中我们通过返回值来控制，官方不介意在前置守卫中操作next。</p> <pre><code class="prism language-js"><span class="token comment">//确保用户可以访问自定义 meta 属性 requiresCamera 的路由：</span> router<span class="token punctuation">.</span><span class="token function">beforeResolve</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token parameter">to</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresCamera<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token keyword">await</span><span class="token function">askForCameraPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token keyword">instanceof</span><span class="token class-name">NotAllowedError</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// ... 处理错误，然后取消导航</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span><span class="token keyword">throw</span> error<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h3><a id="103__187" rel="nofollow"></a>10.3 全局后置钩子</h3> <p><code>router.afterEach</code>它们对于分析、更改页面标题、声明页面等辅助功能以及许多其他事情都很有用。</p> <p>然而和守卫不同的是，这些钩子不会接受<code>next</code> 函数也不会改变导航本身，而是使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://next.router.vuejs.org/zh/guide/advanced/navigation-failures.html"  rel="nofollow">navigation failures</a> 作为第三个参数：</p> <pre><code class="prism language-js">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token function">sendToAnalytics</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h3><a id="104__199" rel="nofollow"></a>10.4 路由独享守卫</h3> <p><code>beforeEnter</code> 守卫<strong>只在进入路由时触发</strong>，不会在<code>params</code>、<code>query</code> 或<code>hash</code> 改变时触发。例如，从<code>/users/2</code> 进入到<code>/users/3</code> 或者从<code>/users/2#info</code> 进入到<code>/users/2#projects</code>。它们只有在<strong>从一个不同的</strong> 路由导航时，才会被触发。</p> <ol> <li>直接在路由配置上定义<code>beforeEnter</code> 守卫：</li> </ol> <pre><code class="prism language-js"><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>     path<span class="token operator">:</span><span class="token string">'/users/:id'</span><span class="token punctuation">,</span>     component<span class="token operator">:</span> UserDetails<span class="token punctuation">,</span><span class="token function-variable function">beforeEnter</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// reject the navigation</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre> <ol start="2"> <li>将一个函数数组传递给<code>beforeEnter</code>，这在为不同的路由重用守卫时很有用：</li> </ol> <pre><code class="prism language-js"><span class="token keyword">function</span><span class="token function">removeQueryParams</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> to<span class="token punctuation">.</span>path<span class="token punctuation">,</span> query<span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span> hash<span class="token operator">:</span> to<span class="token punctuation">.</span>hash<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span><span class="token function">removeHash</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span> path<span class="token operator">:</span> to<span class="token punctuation">.</span>path<span class="token punctuation">,</span> query<span class="token operator">:</span> to<span class="token punctuation">.</span>query<span class="token punctuation">,</span> hash<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> routes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>     path<span class="token operator">:</span><span class="token string">'/users/:id'</span><span class="token punctuation">,</span>     component<span class="token operator">:</span> UserDetails<span class="token punctuation">,</span>     beforeEnter<span class="token operator">:</span><span class="token punctuation">[</span>removeQueryParams<span class="token punctuation">,</span> removeHash<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span>     path<span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span>     component<span class="token operator">:</span> UserDetails<span class="token punctuation">,</span>     beforeEnter<span class="token operator">:</span><span class="token punctuation">[</span>removeQueryParams<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre> <p>也可以通过使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://next.router.vuejs.org/zh/guide/advanced/meta.html"  rel="nofollow">路径 meta 字段</a>和<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html#global-before-guards"  rel="nofollow">全局导航守卫</a>来实现类似的行为。</p> <h3><a id="105__246" rel="nofollow"></a>10.5 组件内守卫</h3> <p>可以在路由组件内直接定义路由导航守卫(传递给路由配置的)。</p> <p>你可以为路由组件添加以下配置：</p> <ul> <li><code>beforeRouteEnter</code></li> <li><code>beforeRouteUpdate</code></li> <li><code>beforeRouteLeave</code></li> </ul> <pre><code class="prism language-js"><span class="token keyword">const</span> UserDetails<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>   template<span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 在渲染该组件的对应路由被验证前调用</span><span class="token comment">// 不能获取组件实例 `this` ！</span><span class="token comment">// 因为当守卫执行时，组件实例还没被创建！</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 在当前路由改变，但是该组件被复用时调用</span><span class="token comment">// 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，</span><span class="token comment">// 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><span class="token comment">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 在导航离开渲染该组件的对应路由时调用</span><span class="token comment">// 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre> <p>1.<code>beforeRouteEnter</code> 守卫<strong>不能</strong> 访问<code>this</code>，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。</p> <p>不过，你可以通过传一个回调给<code>next</code> 来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数：</p> <pre><code class="prism language-js"><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span> next</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 通过 `vm` 访问组件实例</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>2.注意<code>beforeRouteEnter</code> 是支持给<code>next</code> 传递回调的唯一守卫。对于<code>beforeRouteUpdate</code> 和<code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以<em>不支持</em> 传递回调，因为没有必要了：</p> <pre><code class="prism language-js"><span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// just use `this`</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">}</span></code></pre> <p>3.这个<strong>beforeRouteLeave</strong> 通常用来预防用户在还未保存修改前突然离开。该导航可以通过返回<code>false</code> 来取消。</p> <pre><code class="prism language-js"><span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> answer<span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'Do you really want to leave? you have unsaved changes!'</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>answer<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">}</span></code></pre> <p><strong>使用组合 API</strong></p> <p><strong>如果你正在使用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://v3.vuejs.org/guide/composition-api-setup.html#setup"  rel="nofollow">组合 API 和<code>setup</code> 函数</a>来编写组件，你可以通过<code>onBeforeRouteUpdate</code> 和<code>onBeforeRouteLeave</code> 分别添加 update 和 leave 守卫。</strong></p> <h3><a id="106__311" rel="nofollow"></a>10.6 完整的导航解析流程</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/ce8d642ddc54fb9133d7294889dafb16.jpg" alt="Vue3.Router路由的使用"></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-41757.htm">义乌领养宠物猫吧最新消息（义乌宠物收容中心在哪）</a></p>
                                        <p>下一个：<a href="/news/article-42259.htm">延吉最大的宠物医院（延吉最大宠物店）</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-52322.htm" title="如何使用Iintelij IDEA将maven项目打包成war包，并将war包放到tomcat上运行">如何使用Iintelij IDEA将maven项目打包成war包，并将war包放到tomcat上运行</a></li>
                        <li class="py-2"><a href="/news/article-29199.htm" title="动物防疫站能看病吗（动物疫病防控中心可以打疫苗吗）">动物防疫站能看病吗（动物疫病防控中心可以打疫苗吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-4-clash-node.htm" title="2月4日→19.2M/S|2025年最新免费节点Shadowrocket/Clash/V2ray/SSR订阅链接地址，便宜机场推荐">2月4日→19.2M/S|2025年最新免费节点Shadowrocket/Clash/V2ray/SSR订阅链接地址，便宜机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-22255.htm" title="使用API访问开启kerberos集群下的HDFS">使用API访问开启kerberos集群下的HDFS</a></li>
                        <li class="py-2"><a href="/news/article-27813.htm" title="广州宠物领养中心具体地址查询 广州宠物领养中心具体地址查询电话">广州宠物领养中心具体地址查询 广州宠物领养中心具体地址查询电话</a></li>
                        <li class="py-2"><a href="/news/article-61906.htm" title="SQL Server中函数、存储过程与触发器的用法_MsSql">SQL Server中函数、存储过程与触发器的用法_MsSql</a></li>
                        <li class="py-2"><a href="/news/article-45739.htm" title="猫咪三联和狂犬疫苗价格（猫咪三联和狂犬疫苗价格一样吗）">猫咪三联和狂犬疫苗价格（猫咪三联和狂犬疫苗价格一样吗）</a></li>
                        <li class="py-2"><a href="/news/article-58965.htm" title="Springboot中整合knife4j接口文档">Springboot中整合knife4j接口文档</a></li>
                        <li class="py-2"><a href="/news/article-23636.htm" title="动物医院的名字有哪些好听（动物医院名字大气）">动物医院的名字有哪些好听（动物医院名字大气）</a></li>
                        <li class="py-2"><a href="/news/article-26878.htm" title="Vue2 中封装组件-消息提示 Message">Vue2 中封装组件-消息提示 Message</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img src="/assets/website/img/clashgithub/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="m-0">Clash Github官方机场站 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/website/js/frontend/clashgithub/bootstrap.js"></script>
	<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>